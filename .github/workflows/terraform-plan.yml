name: Terraform Plan (Reusable)

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment for GitHub environment protection'
        required: true
        type: string
      terraform-environment:
        description: 'Terraform environment (staging, prod)'
        required: true
        type: string
      terraform-working-directory:
        description: 'Working directory for Terraform'
        required: true
        type: string
      aws-environment:
        description: 'AWS environment'
        required: true
        type: string
      project:
        description: 'Project name'
        required: true
        type: string
      aws-role-name:
        description: 'AWS IAM role name for OIDC'
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      TF_BACKEND_BUCKET:
        required: false
      BUCKET_NAME_SUFFIX:
        required: false
      SUBNET_IDS:
        required: false

env:
  AWS_REGION: us-east-1
  TERRAFORM_VERSION: 1.6.0
  TF_VAR_aws_region: us-east-1

jobs:
  plan:
    name: Plan ${{ inputs.environment }}
    runs-on: ubuntu-latest
    
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.terraform-working-directory }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        terraform_wrapper: false
    
    - name: Terraform Format Check
      id: fmt
      run: terraform fmt -check -recursive
      continue-on-error: true
    
    - name: Terraform Init
      id: init
      run: |
        # Initialize with backend configuration from secrets if provided
        if [ -n "${{ secrets.TF_BACKEND_BUCKET }}" ]; then
          echo "🗄️ Using S3 backend: ${{ secrets.TF_BACKEND_BUCKET }}"
          echo "📂 State key: ${{ inputs.terraform-working-directory }}/terraform.tfstate"
          echo "🌍 Region: ${{ env.AWS_REGION }}"
          
          terraform init \
            -backend-config="bucket=${{ secrets.TF_BACKEND_BUCKET }}" \
            -backend-config="key=${{ inputs.terraform-working-directory }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"
        else
          echo "⚠️ Using local backend (not recommended for production)"
          echo "💡 Set TF_BACKEND_BUCKET secret for remote state management"
          terraform init -migrate-state -input=false || terraform init
        fi
    
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
    
    - name: Set Variables
      id: vars
      run: |
        # Set common variables
        export TF_VAR_bucket_name_suffix="${{ secrets.BUCKET_NAME_SUFFIX || 'zali-staging' }}"
        export TF_VAR_github_repository="${{ github.repository }}"
        export TF_VAR_github_workflow="${{ github.workflow }}"
        
        # Set hardcoded variables for staging
        export TF_VAR_vpc_id="vpc-0a9ee577"
        
        # Set subnet IDs (optional - will auto-discover from VPC if not provided)
        if [ -n "${{ secrets.SUBNET_IDS }}" ]; then
          export TF_VAR_subnet_ids='[${{ secrets.SUBNET_IDS }}]'
          echo "ℹ️ Using provided subnet IDs from secret"
        else
          echo "ℹ️ Subnet IDs not provided - will auto-discover from VPC"
        fi
        
        # Save variables to environment file for next step
        echo "TF_VAR_bucket_name_suffix=${TF_VAR_bucket_name_suffix}" >> $GITHUB_ENV
        echo "TF_VAR_github_repository=${TF_VAR_github_repository}" >> $GITHUB_ENV
        echo "TF_VAR_github_workflow=${TF_VAR_github_workflow}" >> $GITHUB_ENV
        echo "TF_VAR_vpc_id=${TF_VAR_vpc_id}" >> $GITHUB_ENV
        
        if [ -n "${TF_VAR_subnet_ids:-}" ]; then
          echo "TF_VAR_subnet_ids=${TF_VAR_subnet_ids}" >> $GITHUB_ENV
        fi
    
    - name: Terraform Plan
      id: plan
      run: |
        echo "🔍 Planning ${{ inputs.environment }} deployment..."
        terraform plan -no-color -input=false -out=tfplan
    
    - name: Create Plan Summary
      id: summary
      if: always()
      run: |
        # Create a summary of the plan results
        if [ "${{ steps.fmt.outcome }}" = "success" ]; then
          fmt_status="✅"
        else
          fmt_status="❌"
        fi
        
        if [ "${{ steps.init.outcome }}" = "success" ]; then
          init_status="✅"
        else
          init_status="❌"
        fi
        
        if [ "${{ steps.validate.outcome }}" = "success" ]; then
          validate_status="✅"
        else
          validate_status="❌"
        fi
        
        if [ "${{ steps.plan.outcome }}" = "success" ]; then
          plan_status="✅"
        else
          plan_status="❌"
        fi
        
        summary="## 📋 ${{ inputs.environment }} Plan Results
        
        - **Format Check**: ${fmt_status}
        - **Initialization**: ${init_status}
        - **Validation**: ${validate_status}
        - **Plan**: ${plan_status}
        
        **Environment**: \`${{ inputs.environment }}\`
        **Project**: \`${{ inputs.project }}\`
        **Region**: \`us-east-1\`"
        
        # Save summary to output
        echo "summary<<EOF" >> $GITHUB_OUTPUT
        echo "$summary" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Save Plan Artifact
      if: steps.plan.outcome == 'success'
      uses: actions/upload-artifact@v4
      with:
        name: tfplan-${{ inputs.environment }}
        path: ${{ inputs.terraform-working-directory }}/tfplan
        retention-days: 1
