name: Deploy SageMaker Studio (Staging)

on:
  push:
    branches:
      - main
    paths:
      - 'sagemaker-studio/terraform/staging/**'
      - 'terraform/module/sagemaker-studio/**'
      - '.github/workflows/sagemaker-studio-deploy.yml'
  
  pull_request:
    branches:
      - main
    paths:
      - 'sagemaker-studio/terraform/staging/**'
      - 'terraform/module/sagemaker-studio/**'
      - '.github/workflows/sagemaker-studio-deploy.yml'
  
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  AWS_REGION: us-east-1
  TERRAFORM_VERSION: 1.6.0
  TF_VAR_aws_region: us-east-1

jobs:
  terraform:
    name: Terraform Deploy
    runs-on: ubuntu-latest
    
    # Use environment protection for production-like deployments
    environment: 
      name: staging
      url: ${{ steps.outputs.outputs.sagemaker_domain_url }}
    
    defaults:
      run:
        shell: bash
        working-directory: ./sagemaker-studio/terraform/staging
    
    permissions:
      contents: read
      pull-requests: write
      id-token: write  # Required for OIDC authentication
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        terraform_wrapper: false
    
    - name: Terraform Format Check
      id: fmt
      run: terraform fmt -check -recursive
      continue-on-error: true
    
    - name: Terraform Init
      id: init
      run: |
        # Initialize with backend configuration from secrets if provided
        if [ -n "${{ secrets.TF_BACKEND_BUCKET }}" ]; then
          terraform init \
            -backend-config="bucket=${{ secrets.TF_BACKEND_BUCKET }}" \
            -backend-config="key=sagemaker-studio/staging/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"
        else
          terraform init
        fi
    
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
    
    - name: Terraform Plan
      id: plan
      run: |
        # Set additional variables from secrets
        export TF_VAR_vpc_id="${{ secrets.VPC_ID }}"
        export TF_VAR_bucket_name_suffix="${{ secrets.BUCKET_NAME_SUFFIX || 'zali-staging' }}"
        
        # Set subnet IDs if provided (comma-separated list)
        if [ -n "${{ secrets.SUBNET_IDS }}" ]; then
          export TF_VAR_subnet_ids='[${{ secrets.SUBNET_IDS }}]'
        fi
        
        # Validate that required variables are set
        if [ -z "$TF_VAR_vpc_id" ]; then
          echo "ERROR: VPC_ID secret is not set or empty"
          exit 1
        fi
        
        # Validate VPC ID format (without exposing the actual value)
        if [[ ! "$TF_VAR_vpc_id" =~ ^vpc-[a-z0-9]{8,17}$ ]]; then
          echo "ERROR: VPC_ID format is invalid. Expected format: vpc-xxxxxxxxx"
          exit 1
        fi
        
        echo "✓ VPC ID secret is configured and format is valid"
        echo "✓ Region: $TF_VAR_aws_region"
        
        terraform plan -no-color -input=false -out=tfplan
      env:
        TF_VAR_github_repository: ${{ github.repository }}
        TF_VAR_github_workflow: ${{ github.workflow }}
    
    - name: Add Plan to PR Comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('Terraform Plan Results')
          );
          
          const output = `## Terraform Plan Results 🚀
          
          #### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
          #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
          #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`terraform
          ${{ steps.plan.outputs.stdout }}
          \`\`\`
          
          </details>
          
          *Workflow: \`${{ github.workflow }}\`, Action: \`plan\`, Working Directory: \`sagemaker-studio/terraform/staging\`, Workflow: \`${{ github.event_name }}\`*`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: output
            });
          }
    
    - name: Terraform Apply
      id: apply
      if: |
        (github.ref == 'refs/heads/main' && github.event_name == 'push') || 
        (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
      run: |
         export TF_VAR_vpc_id="${{ secrets.VPC_ID }}"
         export TF_VAR_bucket_name_suffix="${{ secrets.BUCKET_NAME_SUFFIX || 'zali-staging' }}"
         
         # Set subnet IDs if provided (comma-separated list)
         if [ -n "${{ secrets.SUBNET_IDS }}" ]; then
           export TF_VAR_subnet_ids='[${{ secrets.SUBNET_IDS }}]'
         fi
         
         # Validate that required variables are set  
         if [ -z "$TF_VAR_vpc_id" ]; then
           echo "ERROR: VPC_ID secret is not set or empty"
           exit 1
         fi
         
         echo "VPC ID secret is configured"
         
         terraform apply -auto-approve tfplan
      env:
        TF_VAR_github_repository: ${{ github.repository }}
        TF_VAR_github_workflow: ${{ github.workflow }}
    
    - name: Terraform Destroy
      id: destroy
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
      run: |
         export TF_VAR_vpc_id="${{ secrets.VPC_ID }}"
         export TF_VAR_bucket_name_suffix="${{ secrets.BUCKET_NAME_SUFFIX || 'zali-staging' }}"
         
         # Set subnet IDs if provided (comma-separated list)
         if [ -n "${{ secrets.SUBNET_IDS }}" ]; then
           export TF_VAR_subnet_ids='[${{ secrets.SUBNET_IDS }}]'
         fi
         
         # Validate that required variables are set  
         if [ -z "$TF_VAR_vpc_id" ]; then
           echo "ERROR: VPC_ID secret is not set or empty"
           exit 1
         fi
         
         echo "VPC ID secret is configured"
         
         terraform destroy -auto-approve
      env:
        TF_VAR_github_repository: ${{ github.repository }}
        TF_VAR_github_workflow: ${{ github.workflow }}
    
    - name: Get Terraform Outputs
      id: outputs
      if: steps.apply.outcome == 'success'
      run: |
        echo "sagemaker_domain_url=$(terraform output -raw sagemaker_domain_url)" >> $GITHUB_OUTPUT
        echo "sagemaker_domain_id=$(terraform output -raw sagemaker_domain_id)" >> $GITHUB_OUTPUT
        echo "ml_artifacts_bucket_name=$(terraform output -raw ml_artifacts_bucket_name)" >> $GITHUB_OUTPUT
    
    - name: Summary
      if: steps.apply.outcome == 'success'
      run: |
        echo "## 🚀 SageMaker Studio Deployment Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Deployment Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Domain ID**: \`${{ steps.outputs.outputs.sagemaker_domain_id }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Domain URL**: ${{ steps.outputs.outputs.sagemaker_domain_url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **ML Artifacts Bucket**: \`${{ steps.outputs.outputs.ml_artifacts_bucket_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **User Profile**: \`zali\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: \`staging\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
        echo "- [SageMaker Studio Console](${{ steps.outputs.outputs.sagemaker_domain_url }})" >> $GITHUB_STEP_SUMMARY
        echo "- [AWS Console](https://console.aws.amazon.com/sagemaker/home?region=${{ env.AWS_REGION }}#/studio)" >> $GITHUB_STEP_SUMMARY
